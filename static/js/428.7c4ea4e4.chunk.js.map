{"version":3,"file":"static/js/428.7c4ea4e4.chunk.js","mappings":"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","sources":["pages/Register/register.jsx","components/FlexContainer/FlexContainer.jsx"],"sourcesContent":["import {\r\n  Box,\r\n  Button,\r\n  Grid,\r\n  styled,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport Axios from \"axios\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport BG from \"../../Assests/BG.jpg\";\r\nimport Logopng from \"../../Assests/maxxieslogos.png\";\r\nimport FlexContainer from \"../../components/FlexContainer/FlexContainer\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst MainDiv = styled(\"div\")({\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n  minHeight: \"100vh\",\r\n  minWidth: \"100vw\",\r\n  margin: 0,\r\n  padding: 0,\r\n  backgroundImage: `url(${BG})`,\r\n  backgroundRepeat: \"no-repeat\",\r\n  backgroundSize: \"cover\",\r\n  backgroundPosition: \"center\",\r\n});\r\n\r\nconst LoginDiv = styled(Box)(({ theme }) => ({\r\n  [theme.breakpoints.up(\"xs\")]: {\r\n    width: \"300px\",\r\n  },\r\n  [theme.breakpoints.up(\"sm\")]: {\r\n    width: \"300px\",\r\n  },\r\n  [theme.breakpoints.up(\"md\")]: {\r\n    width: \"350px\",\r\n  },\r\n  [theme.breakpoints.up(\"lg\")]: {\r\n    width: \"350px\",\r\n  },\r\n  borderRadius: \"20px\",\r\n  backgroundColor: \"white\",\r\n  padding: \"20px\",\r\n}));\r\n\r\nfunction Register() {\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setconfirmPassword] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [height, setHeight] = useState(\"\");\r\n  const [weight, setWeight] = useState(\"\");\r\n  const [confirmPassworderror, setConfirmPasswordError] = useState(\"\");\r\n  const [emailError, setEmailError] = useState(\"\");\r\n  const [firstNameError, setFirstNameError] = useState(\"\");\r\n  const [lastNameError, setLastNameError] = useState(\"\");\r\n  const [emaiFormatlError, setEmaiFormatlError] = useState(\"\");\r\n  const [passworderror, setPasswordError] = useState(\"\");\r\n  const [phoneError, setPhoneError] = useState(\"\");\r\n  const [heightError, setHeightError] = useState(\"\");\r\n  const [weightError, setWeightError] = useState(\"\");\r\n  const [role, setRole] = useState(\"member\");\r\n  const [adminCode, setAdminCode] = useState(\"\");\r\n  const [adminCodeError, setAdminCodeError] = useState(\"\");\r\n  const ADMIN_SECRET = \"ADMIN2024\"; // You may want to move this to env or backend\r\n  const [backendError, setBackendError] = useState(\"\");\r\n\r\n  const navigate = useNavigate();\r\n  //   const validateInputs = () => {\r\n\r\n  //     setErrors(tempErrors);\r\n  //     return Object.keys(tempErrors).length === 0;\r\n  //   };\r\n\r\n  const handleRegister = async (e) => {\r\n    e.preventDefault(); // Prevent page reload\r\n    setBackendError(\"\");\r\n\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    const nameRegex = /^[A-Za-z]{2,50}$/;\r\n    const passwordRegex =\r\n      /^(?=.*?[0-9])(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[^0-9A-Za-z]).{8,32}$/;\r\n\r\n    const phoneRegex = /^0\\d{9}$/;\r\n\r\n    if (!firstName.match(nameRegex)) {\r\n      setFirstNameError(\"Invalid first name.\");\r\n      return;\r\n    }\r\n    setFirstNameError(\"\");\r\n    if (!lastName.match(nameRegex)) {\r\n      setLastNameError(\"Invalid last name.\");\r\n      return;\r\n    }\r\n    setLastNameError(\"\");\r\n    if (!email.match(emailRegex)) {\r\n      setEmaiFormatlError(\"Invalid email format.\");\r\n      return;\r\n    }\r\n    setEmaiFormatlError(\"\");\r\n    console.log(\"Password:\", password);\r\n    console.log(\"Regex Test:\", passwordRegex.test(password));\r\n\r\n    if (!password.match(passwordRegex)) {\r\n      setPasswordError(\r\n        \"Password must be between 8 and 32 characters, with uppercase, lowercase, number, and special character.\"\r\n      );\r\n      return;\r\n    }\r\n    setPasswordError(\"\");\r\n    if (password !== confirmPassword) {\r\n      setConfirmPasswordError(\"Passwords do not match!\");\r\n      return;\r\n    }\r\n\r\n    // Reset error if passwords match\r\n    setConfirmPasswordError(\"\");\r\n    if (!phone.match(phoneRegex)) {\r\n      setPhoneError(\"Phone number must start with '0' and be 10 digits.\");\r\n      return;\r\n    }\r\n    setPhoneError(\"\");\r\n    if (isNaN(height) || height < 50 || height > 250) {\r\n      setHeightError(\"Height must be between 50 and 250 cm.\");\r\n      return;\r\n    }\r\n    setHeightError(\"\");\r\n    if (isNaN(weight) || weight < 20 || weight > 300) {\r\n      setWeightError(\"Weight must be between 20 and 300 kg.\");\r\n      return;\r\n    }\r\n    setWeightError(\"\");\r\n\r\n    if (role === \"admin\") {\r\n      if (adminCode !== ADMIN_SECRET) {\r\n        setAdminCodeError(\"Invalid admin secret code.\");\r\n        return;\r\n      }\r\n      setAdminCodeError(\"\");\r\n    }\r\n\r\n    try {\r\n      // Check if the email already exists\r\n      const emailExists = await Axios.get(\r\n        `http://localhost:5000/user/email-check/${email}`\r\n      );\r\n      if (emailExists.data.exists) {\r\n        setEmailError(\"Email already exists! Please use a different one.\");\r\n        return;\r\n      }\r\n\r\n      // Reset email error if email is valid\r\n      setEmailError(\"\");\r\n\r\n      // Proceed with the registration if email is not already taken\r\n      await Axios.post(\"http://localhost:5000/user\", {\r\n        email: email,\r\n        firstName: firstName,\r\n        lastName: lastName,\r\n        password: password,\r\n        phone: phone,\r\n        height: height,\r\n        weight: weight,\r\n        role: role,\r\n        adminCode: role === \"admin\" ? adminCode : \"\"\r\n      })\r\n      .then(() => {\r\n        navigate(\"/\");\r\n      })\r\n      .catch((err) => {\r\n        if (err.response && err.response.data && err.response.data.error) {\r\n          setBackendError(err.response.data.error);\r\n        } else {\r\n          setBackendError(\"Registration failed. Please try again.\");\r\n        }\r\n      });\r\n    } catch (err) {\r\n      setBackendError(\"Registration failed. Please try again.\");\r\n      console.error(\"Error registering user:\", err);\r\n    }\r\n  };\r\n  return (\r\n    <MainDiv>\r\n      <LoginDiv>\r\n        <Typography\r\n          textAlign={\"center\"}\r\n          color={\"black\"}\r\n          fontSize={\"22px\"}\r\n          fontWeight={600}\r\n        >\r\n          Register\r\n        </Typography>\r\n        <FlexContainer\r\n          sx={{\r\n            justifyContent: \"center\",\r\n            mt: 2,\r\n            mb: 2,\r\n          }}\r\n        >\r\n          <img src={Logopng} alt=\"logo\" width={\"120px\"} />\r\n        </FlexContainer>\r\n        <form onSubmit={handleRegister}>\r\n          {backendError && (\r\n            <Typography color=\"error\" sx={{ mb: 2 }}>\r\n              {backendError}\r\n            </Typography>\r\n          )}\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"First Name\"\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                error={!!firstNameError}\r\n                helperText={firstNameError}\r\n                onChange={(event) => {\r\n                  setFirstName(event.target.value);\r\n                  setFirstNameError(\"\");\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"Last Name\"\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                error={!!lastNameError}\r\n                helperText={lastNameError}\r\n                onChange={(event) => {\r\n                  setLastName(event.target.value);\r\n                  setLastNameError(\"\");\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                label=\"Username (Email)\"\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                error={!!emaiFormatlError || !!emailError} // Show error style if error exists\r\n                helperText={emaiFormatlError || emailError} // Show error message\r\n                onChange={(event) => {\r\n                  setEmail(event.target.value);\r\n                  setEmaiFormatlError(\"\");\r\n                  setEmailError(\"\");\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                label=\"Password\"\r\n                fullWidth\r\n                type=\"password\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                error={!!passworderror}\r\n                helperText={passworderror}\r\n                onChange={(event) => {\r\n                  setPassword(event.target.value);\r\n                  setPasswordError(\"\");\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                label=\"Confirm Password\"\r\n                fullWidth\r\n                type=\"password\"\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                error={!!confirmPassworderror} // Show error style if error exists\r\n                helperText={confirmPassworderror} // Show error message\r\n                onChange={(event) => {\r\n                  setconfirmPassword(event.target.value);\r\n                \r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                label=\"Phone Number\"\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                error={!!phoneError}\r\n                helperText={phoneError}\r\n                onChange={(event) => {\r\n                  setPhone(event.target.value);\r\n                  setPhoneError(\"\");\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"Height\"\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                error={!!heightError}\r\n                helperText={heightError}\r\n                onChange={(event) => {\r\n                  setHeight(event.target.value);\r\n                  setHeightError(\"\");\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                label=\"Weight\"\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                error={!!weightError}\r\n                helperText={weightError}\r\n                onChange={(event) => {\r\n                  setWeight(event.target.value);\r\n                  setWeightError(\"\");\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                select\r\n                label=\"Role\"\r\n                value={role}\r\n                onChange={e => setRole(e.target.value)}\r\n                SelectProps={{ native: true }}\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n              >\r\n                <option value=\"member\">Member</option>\r\n                <option value=\"admin\">Admin</option>\r\n              </TextField>\r\n            </Grid>\r\n            {role === \"admin\" && (\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  label=\"Admin Secret Code\"\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  error={!!adminCodeError}\r\n                  helperText={adminCodeError}\r\n                  onChange={e => setAdminCode(e.target.value)}\r\n                />\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n          <Button\r\n            fullWidth\r\n            sx={{ mt: 2, backgroundColor: \"#2168BA\", color: \"white\" }}\r\n            variant=\"contained\"\r\n            type=\"submit\"\r\n          >\r\n            Register\r\n          </Button>\r\n        </form>\r\n        <FlexContainer\r\n          sx={{\r\n            my: 2,\r\n            flexDirection: \"column\",\r\n            gap: 1,\r\n          }}\r\n        >\r\n          <Button fullWidth variant=\"outlined\"\r\n          sx={{  backgroundColor: \"white\", color: \"#2168BA\" }}\r\n           onClick={() => navigate(\"/\")}>\r\n            I Already Have an Account\r\n          </Button>\r\n        </FlexContainer>\r\n      </LoginDiv>\r\n    </MainDiv>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","import { Box } from \"@mui/material\";\r\nimport propTypes from \"prop-types\";\r\n\r\n/**\r\n * Readymade FlexContainer component.\r\n * Use sx prop to add or override styles.\r\n * By default it has display: flex, alignItems: center, justifyContent: center\r\n *\r\n */\r\nconst FlexContainer = ({ sx, children, onClick= ()=> {} }) => {\r\n  return (\r\n    <Box\r\n    onClick={onClick}\r\n      sx={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        ...sx,\r\n      }}\r\n    >\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default FlexContainer;\r\n\r\nFlexContainer.propTypes = {\r\n  sx: propTypes.object,\r\n  children: propTypes.node,\r\n};"],"names":["MainDiv","styled","display","flexDirection","alignItems","justifyContent","minHeight","minWidth","margin","padding","backgroundImage","BG","backgroundRepeat","backgroundSize","backgroundPosition","LoginDiv","Box","_ref","theme","breakpoints","up","width","borderRadius","backgroundColor","firstName","setFirstName","useState","lastName","setLastName","email","setEmail","password","setPassword","confirmPassword","setconfirmPassword","phone","setPhone","height","setHeight","weight","setWeight","confirmPassworderror","setConfirmPasswordError","emailError","setEmailError","firstNameError","setFirstNameError","lastNameError","setLastNameError","emaiFormatlError","setEmaiFormatlError","passworderror","setPasswordError","phoneError","setPhoneError","heightError","setHeightError","weightError","setWeightError","role","setRole","adminCode","setAdminCode","adminCodeError","setAdminCodeError","backendError","setBackendError","navigate","useNavigate","_jsx","children","_jsxs","Typography","textAlign","color","fontSize","fontWeight","FlexContainer","sx","mt","mb","src","Logopng","alt","onSubmit","async","e","preventDefault","nameRegex","passwordRegex","match","console","log","test","isNaN","Axios","get","data","exists","post","then","catch","err","response","error","Grid","container","spacing","item","xs","TextField","label","fullWidth","variant","size","helperText","onChange","event","target","value","type","select","SelectProps","native","Button","my","gap","onClick"],"sourceRoot":""}